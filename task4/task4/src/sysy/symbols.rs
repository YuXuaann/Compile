#![allow(non_upper_case_globals)]
use crate::symbol::Symbol;
use std::sync::LazyLock;

macro_rules! define_symbol {
    ($name:ident, $symbol_name:expr, $is_terminal:expr) => {
        pub static $name: LazyLock<Symbol> = LazyLock::new(|| Symbol {
            name: $symbol_name.to_string(),
            is_terminal: $is_terminal,
        });
    };
}

macro_rules! define_symbols {
    ($($name:ident, $symbol_name:expr, $is_terminal:expr),*) => {
        $(define_symbol!($name, $symbol_name, $is_terminal);)*
    };
}

#[rustfmt::skip]
define_symbols!(
//  symbols         name                is_terminal
    Epsilon,        "",                 true,

    Semicolon,      ";",                true,
    Commo,          ",",                true,
    Equal,          "=",                true,
    LBracket,       "[",                true,
    RBracket,       "]",                true,
    LBrace,         "{",                true,
    RBrace,         "}",                true,
    LParen,         "(",                true,
    RParen,         ")",                true,
    Plus,           "+",                true,
    Minus,          "-",                true,
    Not,            "!",                true,
    Star,           "*",                true,
    Div,            "/",                true,
    Mod,            "%",                true,
    And,            "&&",               true,
    Or,             "||",               true,
    Eq,             "==",               true,
    Ne,             "!=",               true,
    Lt,             "<",                true,
    Gt,             ">",                true,
    Le,             "<=",               true,
    Ge,             ">=",               true,
    MulOp,          "MulOp",            false,
    AddOp,          "AddOp",            false,
    RelOp,          "RelOp",            false,
    EqOp,           "EqOp",             false,

    Const,          "const",            true,
    IntConst,       "IntConst",         true, // todo: complete logic
    FloatConst,     "FloatConst",       true, // todo: complete logic
    Int,            "int",              true,
    Float,          "float",            true,
    Void,           "void",             true,

    If,             "if",               true,
    Else,           "else",             true,
    While,          "while",            true,
    Break,          "break",            true,
    Continue,       "continue",         true,
    Return,         "return",           true,

    letter_a,       "a",                true,
    letter_b,       "b",                true,
    letter_c,       "c",                true,
    letter_d,       "d",                true,
    letter_e,       "e",                true,
    letter_f,       "f",                true,
    letter_g,       "g",                true,
    letter_h,       "h",                true,
    letter_i,       "i",                true,
    letter_j,       "j",                true,
    letter_k,       "k",                true,
    letter_l,       "l",                true,
    letter_m,       "m",                true,
    letter_n,       "n",                true,
    letter_o,       "o",                true,
    letter_p,       "p",                true,
    letter_q,       "q",                true,
    letter_r,       "r",                true,
    letter_s,       "s",                true,
    letter_t,       "t",                true,
    letter_u,       "u",                true,
    letter_v,       "v",                true,
    letter_w,       "w",                true,
    letter_x,       "x",                true,
    letter_y,       "y",                true,
    letter_z,       "z",                true,
    letter_A,       "A",                true,
    letter_B,       "B",                true,
    letter_C,       "C",                true,
    letter_D,       "D",                true,
    letter_E,       "E",                true,
    letter_F,       "F",                true,
    letter_G,       "G",                true,
    letter_H,       "H",                true,
    letter_I,       "I",                true,
    letter_J,       "J",                true,
    letter_K,       "K",                true,
    letter_L,       "L",                true,
    letter_M,       "M",                true,
    letter_N,       "N",                true,
    letter_O,       "O",                true,
    letter_P,       "P",                true,
    letter_Q,       "Q",                true,
    letter_R,       "R",                true,
    letter_S,       "S",                true,
    letter_T,       "T",                true,
    letter_U,       "U",                true,
    letter_V,       "V",                true,
    letter_W,       "W",                true,
    letter_X,       "X",                true,
    letter_Y,       "Y",                true,
    letter_Z,       "Z",                true,
    digit_0,        "0",                true,
    digit_1,        "1",                true,
    digit_2,        "2",                true,
    digit_3,        "3",                true,
    digit_4,        "4",                true,
    digit_5,        "5",                true,
    digit_6,        "6",                true,
    digit_7,        "7",                true,
    digit_8,        "8",                true,
    digit_9,        "9",                true,
    Ident,          "Ident",            false,

    CompUnit,       "CompUnit",         false,
    FuncDef,        "FuncDef",          false,
    FuncDef_,       "FuncDef'",         false,
    FuncType,       "FuncType",         false,
    FuncFParam,     "FuncFParam",       false,
    FuncFParam_,    "FuncFParam'",      false,
    FuncFParam_2,   "FuncFParam''",     false,
    FuncFParams,    "FuncFParams",      false,
    Decl,           "Decl",             false,
    ConstDecl,      "ConstDecl",        false,
    ConstDecl_,     "ConstDecl'",       false,
    VarDecl,        "VarDecl",          false,
    BType,          "BType",            false,
    ConstDef,       "ConstDef",         false,
    ConstDef_,      "ConstDef'",        false,
    ConstExp,       "ConstExp",         false,
    ConstInitVal,   "ConstInitVal",     false,
    ConstInitVal_,  "ConstInitVal'",    false,
    ConstInitVal_2, "ConstInitVal''",   false,
    VarDef,         "VarDef",           false,
    VarDef_,        "VarDef'",          false,
    VarDef_2,       "VarDef''",         false,
    VarDecl_,       "VarDecl'",         false,
    InitVal,        "InitVal",          false,
    InitVal_,       "InitVal'",         false,
    InitVal_2,      "InitVal''",        false,
    Block,          "Block",            false,
    Block_,         "Block'",           false,
    BlockItem,      "BlockItem",        false,
    Stmt,           "Stmt",             false,
    Exp,            "Exp",              false,
    AddExp,         "AddExp",           false,
    LVal,           "LVal",             false,
    LVal_,          "LVal'",            false,
    Cond,           "Cond",             false,
    LOrExp,         "LOrExp",           false,
    LAndExp,        "LAndExp",          false,
    EqExp,          "EqExp",            false,
    RelExp,         "RelExp",           false,
    MulExp,         "MulExp",           false,
    UnaryExp,       "UnaryExp",         false,
    UnaryExp_,      "UnaryExp'",        false,
    PrimaryExp,     "PrimaryExp",       false,
    Number,         "Number",           false,
    UnaryOp,        "UnaryOp",          false,
    FuncRParams,    "FuncRParams",      false
);
